{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.65, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.29, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.42, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.33, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.56, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.21, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.24, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.84, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.84, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.95, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.37, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.76, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.32, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.12, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.44, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.94, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.43, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.33, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.24, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.47, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.24, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.51, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.31, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.65, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.62, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.34, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.14, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.52, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.29, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.39, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.54, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.94, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.31, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.84, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.76, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.13, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.56, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.23, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.53, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.53, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.27, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.15, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.94, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.22, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.94, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.68, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.35, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.6, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.68, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.6, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.64, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.27, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.13, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.95, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.13, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.17, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.49, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.2, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.69, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.5, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.27, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.37, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.56, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.12, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.1, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.16, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.68, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.62, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.76, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.23, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.3, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.95, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.39, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.69, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.15, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.69, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.12, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.18, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.68, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.23, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.65, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.84, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.31, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.61, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.72, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.52, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.84, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.32, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.29, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.33, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.55, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.67, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.53, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.2, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.16, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.5, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.61, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.69, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.07, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.73, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.64, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.76, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.16, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.4, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.45, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.2, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.23, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.19, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.62, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.6, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.51, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.11, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.24, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.4, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.3, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.67, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.25, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.16, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.35, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.62, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.31, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.5, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.67, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.15, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.12, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.33, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.6, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.51, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.36, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.46, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.41, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.62, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.73, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.68, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.61, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.76, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.72, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.29, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.79, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.21, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.14, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.72, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.55, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.73, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "toLowerCase", "function_summary": "Converts a string to lowercase", "function_content": "std::string toLowerCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to lowercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.11, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.16, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.88, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.54, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.32, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.38, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.05, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.89, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-001", "requirement_text": "Connect to database", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.27, "prompt": "Given the following requirement:\n\nRequirement: Connect to database\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.46, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.17, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.16, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.21, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "HTTPClient::sendRequest", "function_summary": "Sends an HTTP request to the specified URL", "function_content": "HTTPResponse HTTPClient::sendRequest(const std::string& url, HTTPMethod method) {\n    // Implementation of HTTP request\n    HTTPResponse response;\n    response.statusCode = 200;\n    response.body = \"Response from \" + url;\n    return response;\n}", "is_correct": false, "confidence_score": 0.68, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Sends an HTTP request to the specified URL\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.64, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.08, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.55, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.86, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.32, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.69, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.38, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.06, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.76, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.71, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "readFromFile", "function_summary": "Reads data from a specified file path", "function_content": "std::string readFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n    \n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    \n    return buffer.str();\n}", "is_correct": true, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Reads data from a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-001", "requirement_text": "Log error message", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.18, "prompt": "Given the following requirement:\n\nRequirement: Log error message\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.21, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.85, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-001", "requirement_text": "Display dialog box", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Display dialog box\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-003", "requirement_text": "Resize window", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Resize window\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.67, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "toUpperCase", "function_summary": "Converts a string to uppercase", "function_content": "std::string toUpperCase(const std::string& input) {\n    std::string result = input;\n    std::transform(result.begin(), result.end(), result.begin(),\n                   [](unsigned char c) { return std::toupper(c); });\n    return result;\n}", "is_correct": true, "confidence_score": 0.82, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Converts a string to uppercase\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "CacheManager::storeValue", "function_summary": "Stores a value in the cache with the specified key", "function_content": "void CacheManager::storeValue(const std::string& key, const std::string& value) {\n    cache[key] = value;\n}", "is_correct": false, "confidence_score": 0.35, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Stores a value in the cache with the specified key\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.24, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.92, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.6, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-001", "requirement_text": "Convert string to uppercase", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.26, "prompt": "Given the following requirement:\n\nRequirement: Convert string to uppercase\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.78, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.27, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.53, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.93, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.63, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.15, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.75, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.81, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.83, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.25, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.94, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.72, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "deleteFile", "function_summary": "Deletes the file at the specified path", "function_content": "bool deleteFile(const std::string& filePath) {\n    return std::remove(filePath.c_str()) == 0;\n}", "is_correct": true, "confidence_score": 0.95, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Deletes the file at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "Database::executeQuery", "function_summary": "Executes a SQL query on the database", "function_content": "ResultSet Database::executeQuery(const std::string& query) {\n    if (!isConnected) {\n        throw std::runtime_error(\"Database not connected\");\n    }\n    \n    // Execute query and return results\n    return connection->execute(query);\n}", "is_correct": false, "confidence_score": 0.14, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Executes a SQL query on the database\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-001", "requirement_text": "Read data from a file", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.58, "prompt": "Given the following requirement:\n\nRequirement: Read data from a file\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-003", "requirement_text": "Split string by delimiter", "function_name": "splitString", "function_summary": "Splits a string by the specified delimiter", "function_content": "std::vector<std::string> splitString(const std::string& input, char delimiter) {\n    std::vector<std::string> result;\n    std::stringstream ss(input);\n    std::string token;\n    \n    while (std::getline(ss, token, delimiter)) {\n        result.push_back(token);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.74, "prompt": "Given the following requirement:\n\nRequirement: Split string by delimiter\n\nAnd this function summary:\n\nFunction Summary: Splits a string by the specified delimiter\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-002", "requirement_text": "Execute SQL query", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.35, "prompt": "Given the following requirement:\n\nRequirement: Execute SQL query\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-STR-002", "requirement_text": "Convert string to lowercase", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.59, "prompt": "Given the following requirement:\n\nRequirement: Convert string to lowercase\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "trimString", "function_summary": "Removes leading and trailing whitespace from a string", "function_content": "std::string trimString(const std::string& input) {\n    // Find first non-whitespace character\n    size_t start = input.find_first_not_of(\" \\t\\n\\r\");\n    if (start == std::string::npos) {\n        return \"\";  // String contains only whitespace\n    }\n    \n    // Find last non-whitespace character\n    size_t end = input.find_last_not_of(\" \\t\\n\\r\");\n    \n    // Extract the substring\n    return input.substr(start, end - start + 1);\n}", "is_correct": true, "confidence_score": 0.95, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Removes leading and trailing whitespace from a string\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.57, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.12, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.22, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.7, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-DB-003", "requirement_text": "Close database connection", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.65, "prompt": "Given the following requirement:\n\nRequirement: Close database connection\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "Logger::logMessage", "function_summary": "Logs a message with a specified severity level", "function_content": "void Logger::logMessage(LogLevel level, const std::string& message) {\n    std::string prefix;\n    switch (level) {\n        case LogLevel::DEBUG:\n            prefix = \"[DEBUG] \";\n            break;\n        case LogLevel::INFO:\n            prefix = \"[INFO] \";\n            break;\n        case LogLevel::WARNING:\n            prefix = \"[WARNING] \";\n            break;\n        case LogLevel::ERROR:\n            prefix = \"[ERROR] \";\n            break;\n        case LogLevel::CRITICAL:\n            prefix = \"[CRITICAL] \";\n            break;\n    }\n    \n    std::cout << prefix << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.15, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Logs a message with a specified severity level\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "NetworkSocket::close", "function_summary": "Closes a network socket connection", "function_content": "void NetworkSocket::close() {\n    if (isConnected) {\n        // Close the socket\n        closesocket(socketDescriptor);\n        isConnected = false;\n    }\n}", "is_correct": false, "confidence_score": 0.11, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Closes a network socket connection\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "TimeUtility::getCurrentTime", "function_summary": "Returns the current system time", "function_content": "std::string TimeUtility::getCurrentTime() {\n    auto now = std::chrono::system_clock::now();\n    std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \n    std::stringstream ss;\n    ss << std::ctime(&time);\n    \n    std::string timeStr = ss.str();\n    if (!timeStr.empty() && timeStr[timeStr.length() - 1] == '\\n') {\n        timeStr.erase(timeStr.length() - 1);\n    }\n    \n    return timeStr;\n}", "is_correct": false, "confidence_score": 0.09, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Returns the current system time\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-GUI-002", "requirement_text": "Handle button click event", "function_name": "UserInterface::showMessage", "function_summary": "Displays a message to the user", "function_content": "void UserInterface::showMessage(const std::string& message) {\n    std::cout << \"Message: \" << message << std::endl;\n}", "is_correct": false, "confidence_score": 0.28, "prompt": "Given the following requirement:\n\nRequirement: Handle button click event\n\nAnd this function summary:\n\nFunction Summary: Displays a message to the user\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.91, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-002", "requirement_text": "Search for an element in an array", "function_name": "binarySearch", "function_summary": "Performs binary search on a sorted array to find an element", "function_content": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target)\n            return mid;\n        \n        // If target greater, ignore left half\n        if (arr[mid] < target)\n            left = mid + 1;\n        // If target is smaller, ignore right half\n        else\n            right = mid - 1;\n    }\n    \n    // Element not present\n    return -1;\n}", "is_correct": true, "confidence_score": 0.9, "prompt": "Given the following requirement:\n\nRequirement: Search for an element in an array\n\nAnd this function summary:\n\nFunction Summary: Performs binary search on a sorted array to find an element\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-STR-004", "requirement_text": "Trim whitespace from string", "function_name": "EventHandler::registerCallback", "function_summary": "Registers a callback function for a specific event", "function_content": "void EventHandler::registerCallback(EventType eventType, CallbackFunction callback) {\n    callbacks[eventType].push_back(callback);\n}", "is_correct": false, "confidence_score": 0.73, "prompt": "Given the following requirement:\n\nRequirement: Trim whitespace from string\n\nAnd this function summary:\n\nFunction Summary: Registers a callback function for a specific event\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-003", "requirement_text": "Check if file exists", "function_name": "fileExists", "function_summary": "Checks if a file exists at the specified path", "function_content": "bool fileExists(const std::string& filePath) {\n    std::ifstream file(filePath);\n    return file.good();\n}", "is_correct": true, "confidence_score": 0.66, "prompt": "Given the following requirement:\n\nRequirement: Check if file exists\n\nAnd this function summary:\n\nFunction Summary: Checks if a file exists at the specified path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ERR-002", "requirement_text": "Handle exception", "function_name": "Queue::push", "function_summary": "Adds an element to the end of the queue", "function_content": "void Queue::push(const T& element) {\n    elements.push_back(element);\n}", "is_correct": false, "confidence_score": 0.32, "prompt": "Given the following requirement:\n\nRequirement: Handle exception\n\nAnd this function summary:\n\nFunction Summary: Adds an element to the end of the queue\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-FILE-002", "requirement_text": "Write data to a file", "function_name": "writeToFile", "function_summary": "Writes data to a specified file path", "function_content": "bool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << data;\n    file.close();\n    \n    return true;\n}", "is_correct": true, "confidence_score": 0.77, "prompt": "Given the following requirement:\n\nRequirement: Write data to a file\n\nAnd this function summary:\n\nFunction Summary: Writes data to a specified file path\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-001", "requirement_text": "Sort an array of integers", "function_name": "sortArray", "function_summary": "Sorts an array of integers in ascending order", "function_content": "void sortArray(int arr[], int size) {\n    // Implementation of quicksort algorithm\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "is_correct": true, "confidence_score": 0.8, "prompt": "Given the following requirement:\n\nRequirement: Sort an array of integers\n\nAnd this function summary:\n\nFunction Summary: Sorts an array of integers in ascending order\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-ALG-004", "requirement_text": "Calculate factorial of a number", "function_name": "calculateFactorial", "function_summary": "Calculates the factorial of a given number", "function_content": "int calculateFactorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}", "is_correct": true, "confidence_score": 0.87, "prompt": "Given the following requirement:\n\nRequirement: Calculate factorial of a number\n\nAnd this function summary:\n\nFunction Summary: Calculates the factorial of a given number\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
{"requirement_id": "REQ-FILE-004", "requirement_text": "Delete a file", "function_name": "Configuration::loadConfig", "function_summary": "Loads configuration from a specified file", "function_content": "bool Configuration::loadConfig(const std::string& configPath) {\n    try {\n        // Load and parse the configuration file\n        ConfigParser parser;\n        settings = parser.parse(configPath);\n        return true;\n    } catch (const std::exception& e) {\n        std::cerr << \"Failed to load configuration: \" << e.what() << std::endl;\n        return false;\n    }\n}", "is_correct": false, "confidence_score": 0.12, "prompt": "Given the following requirement:\n\nRequirement: Delete a file\n\nAnd this function summary:\n\nFunction Summary: Loads configuration from a specified file\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 0.0}
{"requirement_id": "REQ-ALG-003", "requirement_text": "Merge two sorted arrays", "function_name": "mergeSortedArrays", "function_summary": "Merges two sorted arrays into a single sorted array", "function_content": "std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> result;\n    size_t i = 0, j = 0;\n    \n    // Compare elements from both arrays and merge in sorted order\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            result.push_back(arr1[i++]);\n        } else {\n            result.push_back(arr2[j++]);\n        }\n    }\n    \n    // Add remaining elements from first array\n    while (i < arr1.size()) {\n        result.push_back(arr1[i++]);\n    }\n    \n    // Add remaining elements from second array\n    while (j < arr2.size()) {\n        result.push_back(arr2[j++]);\n    }\n    \n    return result;\n}", "is_correct": true, "confidence_score": 0.69, "prompt": "Given the following requirement:\n\nRequirement: Merge two sorted arrays\n\nAnd this function summary:\n\nFunction Summary: Merges two sorted arrays into a single sorted array\n\nOn a scale of 0 to 100, rate how confident you are that this function implements the requirement.\nOnly return a single integer number between 0 and 100, where 0 means no relationship and 100 means perfect match.\n", "reward": 1.0}
